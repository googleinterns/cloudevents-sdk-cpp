syntax = "proto3";

package google.pubsub.v1;

import "google/protobuf/timestamp.proto";

message PubsubMessage {
  // The message data field. If this field is empty, the message must contain
  // at least one attribute.
  bytes data = 1;

  // Attributes for this message. If this field is empty, the message must
  // contain non-empty data. This can be used to filter messages on the
  // subscription.
  map<string, string> attributes = 2;

  // ID of this message, assigned by the server when the message is published.
  // Guaranteed to be unique within the topic. This value may be read by a
  // subscriber that receives a `PubsubMessage` via a `Pull` call or a push
  // delivery. It must not be populated by the publisher in a `Publish` call.
  string message_id = 3;

  // The time at which the message was published, populated by the server when
  // it receives the `Publish` call. It must not be populated by the
  // publisher in a `Publish` call.
  google.protobuf.Timestamp publish_time = 4;

  // If non-empty, identifies related messages for which publish order should be
  // respected. If a `Subscription` has `enable_message_ordering` set to `true`,
  // messages published with the same non-empty `ordering_key` value will be
  // delivered to subscribers in the order in which they are received by the
  // Pub/Sub system. All `PubsubMessage`s published in a given `PublishRequest`
  // must specify the same `ordering_key` value.
  // <b>EXPERIMENTAL:</b> This feature is part of a closed alpha release. This
  // API might be changed in backward-incompatible ways and is not recommended
  // for production use. It is not subject to any SLA or deprecation policy.
  string ordering_key = 5;
}

